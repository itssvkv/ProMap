package com.itssvkv.promap.utilsimport android.content.Contextimport android.graphics.Bitmapimport android.graphics.Canvasimport android.graphics.drawable.Drawableimport android.location.Addressimport android.location.Geocoderimport android.os.Buildimport androidx.core.content.res.ResourcesCompatimport com.google.android.gms.maps.CameraUpdateFactoryimport com.google.android.gms.maps.GoogleMapimport com.google.android.gms.maps.model.BitmapDescriptorimport com.google.android.gms.maps.model.BitmapDescriptorFactoryimport com.google.android.gms.maps.model.CameraPositionimport com.google.android.gms.maps.model.LatLngimport com.google.android.gms.maps.model.Markerimport com.google.android.gms.maps.model.MarkerOptionsimport com.itssvkv.promap.Rimport java.util.Localeobject MarkerUtils {    private val gaza = LatLng(31.504795272901365, 34.46896092129624)    private val helsinki = LatLng(60.17197261894534, 24.926711136448876)    private val damietta = LatLng(31.417480468169572, 31.81682465369477)    fun addMarkerOnHelsinki(map: GoogleMap?): Marker? {        val helsinkiMarker = map?.addMarker(MarkerOptions().position(helsinki))        map?.animateCamera(            CameraUpdateFactory.newCameraPosition(                CameraPosition.builder().target(                    helsinki                ).zoom(12f).build()            ), 2000, null        )        return helsinkiMarker    }    fun addVectorToGaza(        context: Context,        resourceId: Int,        map: GoogleMap?    ): Marker? {        val icon = convertVectorToBitMap(context, resourceId)        val vectorMarker = map?.addMarker(MarkerOptions().apply {            position(gaza)            icon(icon)        })        map?.animateCamera(            CameraUpdateFactory.newCameraPosition(                CameraPosition                    .builder()                    .apply {                        target(gaza)                        zoom(10f)                    }.build()            ), 2000, null        )        return vectorMarker    }    fun addMarkerOnDamietta(map: GoogleMap?): Marker? {        val damiettaMarker = map?.addMarker(MarkerOptions().apply {            position(damietta)            icon(                BitmapDescriptorFactory.fromResource(                    R.drawable.resize_palestine                )            )        })        map?.animateCamera(            CameraUpdateFactory.newCameraPosition(                CameraPosition                    .builder()                    .apply                    {                        zoom(12f)                        target(damietta)                    }.build()            ), 2000, null        )        return damiettaMarker    }    private fun convertVectorToBitMap(context: Context, resourceId: Int): BitmapDescriptor {        val vectorDrawable: Drawable = ResourcesCompat            .getDrawable(                context.resources, resourceId, null            ) ?: return BitmapDescriptorFactory.defaultMarker()        val bitmap = Bitmap.createBitmap(            vectorDrawable.intrinsicWidth,            vectorDrawable.intrinsicHeight,            Bitmap.Config.ARGB_8888        )        val canvas = Canvas(bitmap)        vectorDrawable.setBounds(0, 0, canvas.width, canvas.height)        vectorDrawable.draw(canvas)        return BitmapDescriptorFactory.fromBitmap(bitmap)    }    fun enableMarkerDrag(isChecked: Boolean, markerList: List<Marker>) {        markerList.forEach { marker ->            marker.isDraggable = isChecked        }    }    fun removeAllMarkers(markerList: List<Marker>) {        markerList.forEach { marker -> marker.remove() }    }    fun getLocationInfo(        location: LatLng,        context: Context,        locale: Locale,        callback: (Address?) -> Unit    ) {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {            Geocoder(context, locale).getFromLocation(                location.latitude,                location.longitude,                1            ) { result ->                if (result.size > 0) {                    callback.invoke(result.first())                } else {                    callback.invoke(null)                }            }        } else {            val result = Geocoder(context, locale).getFromLocation(                location.latitude,                location.longitude,                1            )            result?.let {                if (it.size > 0) {                    callback.invoke(it.first())                } else {                    callback.invoke(null)                }            }        }    }}