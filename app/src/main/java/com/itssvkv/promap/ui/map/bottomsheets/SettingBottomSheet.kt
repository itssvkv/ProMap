package com.itssvkv.promap.ui.map.bottomsheetsimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport com.google.android.material.bottomsheet.BottomSheetDialogFragmentimport com.itssvkv.promap.Rimport com.itssvkv.promap.databinding.SettingBottomSheetBindingimport com.itssvkv.promap.models.MapStyleimport com.itssvkv.promap.models.MapTypeimport com.itssvkv.promap.ui.map.adapters.MapStyleAdapterimport com.itssvkv.promap.ui.map.adapters.MapTypeAdapterclass SettingBottomSheet : BottomSheetDialogFragment() {    private var binding: SettingBottomSheetBinding? = null    private var mapTypeAdapter: MapTypeAdapter? = null    private var mapStyleAdapter: MapStyleAdapter? = null    var isZoomControlsChecked: ((Boolean) -> Unit)? = null    var isZoomGesturesChecked: ((Boolean) -> Unit)? = null    var isScrollGesturesChecked: ((Boolean) -> Unit)? = null    var isRotateGesturesChecked: ((Boolean) -> Unit)? = null    var isCompassChecked: ((Boolean) -> Unit)? = null    var isToolbarChecked: ((Boolean) -> Unit)? = null    var mapType: ((MapType) -> Unit)? = null    var mapStyle: ((MapStyle) -> Unit)? = null    init {        setStyle(STYLE_NORMAL, R.style.AppBottomSheetDialogTheme)    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = SettingBottomSheetBinding.inflate(layoutInflater, container, false)        initCheckBox()        initRecyclers()        initMapTypeClicks()        initMapStyleClick()        return binding?.root    }    private fun initCheckBox() {        binding?.ZoomControls?.isChecked = false        binding?.ZoomGestures?.isChecked = true        binding?.ScrollGestures?.isChecked = true        binding?.RotateGestures?.isChecked = true        binding?.Compass?.isChecked = true        binding?.Toolbar?.isChecked = true        binding?.ZoomControls?.setOnCheckedChangeListener { _, isChecked ->            isZoomControlsChecked?.invoke(isChecked)        }        binding?.ZoomGestures?.setOnCheckedChangeListener { _, isChecked ->            isZoomGesturesChecked?.invoke(isChecked)        }        binding?.ScrollGestures?.setOnCheckedChangeListener { _, isChecked ->            isScrollGesturesChecked?.invoke(isChecked)        }        binding?.RotateGestures?.setOnCheckedChangeListener { _, isChecked ->            isRotateGesturesChecked?.invoke(isChecked)        }        binding?.Compass?.setOnCheckedChangeListener { _, isChecked ->            isCompassChecked?.invoke(isChecked)        }        binding?.Toolbar?.setOnCheckedChangeListener { _, isChecked ->            isToolbarChecked?.invoke(isChecked)        }    }    private fun initRecyclers() {        mapTypeAdapter = MapTypeAdapter()        mapTypeAdapter?.submitList(getMapType())        binding?.mapTypeRecycler?.adapter = mapTypeAdapter        mapStyleAdapter = MapStyleAdapter()        mapStyleAdapter?.submitList(getMapStyle())        binding?.mapStyleRecycler?.adapter = mapStyleAdapter    }    private fun getMapType() = listOf(        MapType(id = 1, name = "Normal"),        MapType(id = 2, name = "Satellite"),        MapType(id = 3, name = "Terrain"),        MapType(id = 4, name = "Hybrid"),        MapType(id = 5, name = "None"),    )    private fun initMapTypeClicks() {        mapTypeAdapter?.onItemSelected = { item ->            mapType?.invoke(item)            this.dismiss()        }    }    private fun getMapStyle() = listOf(        MapStyle(            id = 1,            name = "Standard",            path = R.raw.standard        ), MapStyle(            id = 2,            name = "Silver",            path = R.raw.silver        ), MapStyle(            id = 3,            name = "Retro",            path = R.raw.retro        ), MapStyle(            id = 4,            name = "Dark",            path = R.raw.dark        ), MapStyle(            id = 5,            name = "Night",            path = R.raw.night        ), MapStyle(            id = 6,            name = "Aubergine",            path = R.raw.aubergine        )    )    private fun initMapStyleClick() {        mapStyleAdapter?.onStyleSelected = { item ->            mapStyle?.invoke(item)            this.dismiss()        }    }    override fun onDestroyView() {        super.onDestroyView()        binding = null        mapTypeAdapter = null        mapStyleAdapter = null    }}