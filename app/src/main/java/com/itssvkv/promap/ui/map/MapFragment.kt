package com.itssvkv.promap.ui.mapimport android.os.Buildimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.annotation.RequiresApiimport androidx.fragment.app.Fragmentimport com.google.android.gms.maps.GoogleMapimport com.google.android.gms.maps.GoogleMap.OnMarkerClickListenerimport com.google.android.gms.maps.GoogleMap.OnMarkerDragListenerimport com.google.android.gms.maps.OnMapReadyCallbackimport com.google.android.gms.maps.SupportMapFragmentimport com.google.android.gms.maps.model.MapStyleOptionsimport com.google.android.gms.maps.model.Markerimport com.itssvkv.promap.Rimport com.itssvkv.promap.databinding.FragmentMapBindingimport com.itssvkv.promap.models.LocationDataimport com.itssvkv.promap.ui.map.adapters.CustomInfoAdapterimport com.itssvkv.promap.ui.map.bottomsheets.CameraBottomSheetimport com.itssvkv.promap.ui.map.bottomsheets.MarkerBottomSheetimport com.itssvkv.promap.ui.map.bottomsheets.SettingBottomSheetimport com.itssvkv.promap.utils.CameraUtils.animateToNairobiimport com.itssvkv.promap.utils.CameraUtils.moveCameraToBerlinimport com.itssvkv.promap.utils.CameraUtils.moveCameraToDenverBoundsAndRestrictimport com.itssvkv.promap.utils.CameraUtils.moveCameraToTokyoBoundsimport com.itssvkv.promap.utils.CameraUtils.setMaxZoomLevelimport com.itssvkv.promap.utils.CameraUtils.setMinZoomLevelimport com.itssvkv.promap.utils.CameraUtils.showBuildingimport com.itssvkv.promap.utils.Common.TAGimport com.itssvkv.promap.utils.MarkerUtils.addMarkerOnDamiettaimport com.itssvkv.promap.utils.MarkerUtils.addMarkerOnHelsinkiimport com.itssvkv.promap.utils.MarkerUtils.addVectorToGazaimport com.itssvkv.promap.utils.MarkerUtils.enableMarkerDragimport com.itssvkv.promap.utils.MarkerUtils.getLocationInfoimport com.itssvkv.promap.utils.MarkerUtils.removeAllMarkersimport java.util.Localeclass MapFragment : Fragment(), OnMapReadyCallback, OnMarkerDragListener, OnMarkerClickListener {    private var binding: FragmentMapBinding? = null    private var map: GoogleMap? = null    private lateinit var adapter: CustomInfoAdapter    private var isAllFABsVisible: Boolean? = null    private val settingBottomSheet: SettingBottomSheet by lazy { SettingBottomSheet() }    private val cameraBottomSheet: CameraBottomSheet by lazy { CameraBottomSheet() }    private val markerBottomSheet: MarkerBottomSheet by lazy { MarkerBottomSheet() }    private val markerList: MutableList<Marker> by lazy { mutableListOf() }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentMapBinding.inflate(layoutInflater, container, false)        adapter = CustomInfoAdapter(requireContext())        return binding?.root    }    @RequiresApi(Build.VERSION_CODES.TIRAMISU)    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        val mapFragment =            childFragmentManager.findFragmentById(R.id.mapFragment) as SupportMapFragment        mapFragment.getMapAsync(this)        initAddFAB()        initCheckBox()        initMapTypeClicks()        initMapStyleClicks()        initCameraShowBuilding()        setCameraZoomLevel()        initCameraBtnClicks()        initMarkerClicks()    }    override fun onMapReady(map: GoogleMap) {        map.setOnMarkerDragListener(this)        map.setOnMarkerDragListener(this)        this.map = map    }    private fun initAddFAB() {        binding?.settingFab?.visibility = View.GONE        binding?.cameraFab?.visibility = View.GONE        binding?.markerFab?.visibility = View.GONE        binding?.polylineFab?.visibility = View.GONE        binding?.clearFab?.visibility = View.GONE        isAllFABsVisible = false        binding?.addFab?.setOnClickListener {            isAllFABsVisible = if (!isAllFABsVisible!!) {                binding?.settingFab?.show()                binding?.cameraFab?.show()                binding?.markerFab?.show()                binding?.polylineFab?.show()                binding?.clearFab?.show()                true            } else {                binding?.settingFab?.hide()                binding?.cameraFab?.hide()                binding?.markerFab?.hide()                binding?.polylineFab?.hide()                binding?.clearFab?.hide()                false            }        }        initSettingFABClick()        initCameraFABClick()        initMarkerFABClick()    }    private fun initSettingFABClick() {        binding?.settingFab?.setOnClickListener {            settingBottomSheet.show(requireActivity().supportFragmentManager, null)        }    }    private fun initCameraFABClick() {        binding?.cameraFab?.setOnClickListener {            cameraBottomSheet.show(requireActivity().supportFragmentManager, null)        }    }    private fun initMarkerFABClick() {        binding?.markerFab?.setOnClickListener {            markerBottomSheet.show(requireActivity().supportFragmentManager, null)        }    }    //Settings FAB    private fun initCheckBox() {        settingBottomSheet.isZoomControlsChecked = {            map?.uiSettings?.isZoomControlsEnabled = it        }        settingBottomSheet.isZoomGesturesChecked = {            map?.uiSettings?.isZoomGesturesEnabled = it        }        settingBottomSheet.isScrollGesturesChecked = {            map?.uiSettings?.isScrollGesturesEnabled = it        }        settingBottomSheet.isRotateGesturesChecked = {            map?.uiSettings?.isRotateGesturesEnabled = it        }        settingBottomSheet.isCompassChecked = {            map?.uiSettings?.isCompassEnabled = it        }        settingBottomSheet.isToolbarChecked = {            map?.uiSettings?.isMapToolbarEnabled = it        }    }    private fun initMapTypeClicks() {        settingBottomSheet.mapType = {            when (it.id) {                1 -> map?.mapType = GoogleMap.MAP_TYPE_NORMAL                2 -> map?.mapType = GoogleMap.MAP_TYPE_SATELLITE                3 -> map?.mapType = GoogleMap.MAP_TYPE_TERRAIN                4 -> map?.mapType = GoogleMap.MAP_TYPE_HYBRID                5 -> map?.mapType = GoogleMap.MAP_TYPE_NONE                else -> map?.mapType = GoogleMap.MAP_TYPE_NORMAL            }        }    }    private fun initMapStyleClicks() {        settingBottomSheet.mapStyle = {            try {                map?.setMapStyle(                    MapStyleOptions.loadRawResourceStyle(                        requireContext(),                        it.path                    )                )            } catch (e: Exception) {                Log.d(TAG, "initMapStyleClicks: ${e.message}")            }        }    }    //Camera FAB    private fun initCameraShowBuilding() {        cameraBottomSheet.showBuildings = { isChecked ->            showBuilding(map, isChecked)        }    }    private fun setCameraZoomLevel() {        cameraBottomSheet.setMinZoomLevel = { minLevel ->            setMinZoomLevel(map, minLevel)        }        cameraBottomSheet.setMaxZoomLevel = { maxLevel ->            setMaxZoomLevel(map, maxLevel)        }    }    private fun initCameraBtnClicks() {        cameraBottomSheet.moveToBerlin = {            moveCameraToBerlin(map)        }        cameraBottomSheet.moveToTokyoBounds = {            moveCameraToTokyoBounds(map)        }        cameraBottomSheet.moveToDenverBoundsRestrict = {            moveCameraToDenverBoundsAndRestrict(map)        }        cameraBottomSheet.animateToNairobi = {            animateToNairobi(map)        }    }    //Marker FAB    private fun initMarkerClicks() {        markerBottomSheet.addMarkerOnHelsinki = {            val helsinkiMarker = addMarkerOnHelsinki(map)            helsinkiMarker?.let { markerList.add(it) }        }        markerBottomSheet.addCustomMarkerOnGaza = {            val gazaMarker = addVectorToGaza(                context = requireContext(),                resourceId = R.drawable.palestine,                map = map            )            gazaMarker?.let { markerList.add(it) }        }        markerBottomSheet.addCustomMarkerOnDamietta = {            val damiettaMarker = addMarkerOnDamietta(map = map)            damiettaMarker?.let { markerList.add(it) }        }        markerBottomSheet.removeAllMarkers = {            removeAllMarkers(markerList = markerList)        }        markerBottomSheet.enableDragCheck = { isChecked ->            enableMarkerDrag(isChecked = isChecked, markerList = markerList)        }        markerBottomSheet.enableCustomInfoWindowChick = { isChecked ->            if (isChecked) {                map?.setInfoWindowAdapter(adapter)            } else {                map?.setInfoWindowAdapter(null)            }        }    }    override fun onDestroy() {        super.onDestroy()        binding = null        map = null    }    override fun onMarkerDrag(p0: Marker) {    }    override fun onMarkerDragEnd(marker: Marker) {        Toast.makeText(requireContext(), marker.position.toString(), Toast.LENGTH_SHORT).show()    }    override fun onMarkerDragStart(p0: Marker) {    }    override fun onMarkerClick(marker: Marker): Boolean {        marker.showInfoWindow()        getLocationInfo(            marker.position,            requireContext(),            Locale.US        ) { data ->            val info = if (data == null) {                LocationData(                    countryName = null,                    countryCode = null,                    postalCode = null,                    adminArea = null,                    lat = marker.position.latitude.toString(),                    lng = marker.position.longitude.toString()                )            } else {                LocationData(                    countryName = data.countryName,                    countryCode = data.countryCode,                    postalCode = data.postalCode,                    adminArea = data.adminArea,                    lat = data.latitude.toString(),                    lng = data.longitude.toString()                )            }            adapter.setData(info)        }        marker.showInfoWindow()        return true    }}